<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE mapper PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN" "http://mybatis.org/dtd/mybatis-3-mapper.dtd">
<mapper namespace="com.vsc.website.dao.JobOffersMapper">
  <resultMap id="BaseResultMap" type="com.vsc.website.entity.JobOffers">
    <id column="id" jdbcType="INTEGER" property="id" />
    <result column="type_id" jdbcType="INTEGER" property="typeId" />
    <result column="address_id" jdbcType="INTEGER" property="addressId" />
    <result column="number" jdbcType="INTEGER" property="number" />
    <result column="department_id" jdbcType="INTEGER" property="departmentId" />
    <result column="state" jdbcType="INTEGER" property="state" />
    <result column="update_user" jdbcType="INTEGER" property="updateUser" />
    <result column="update_at" jdbcType="TIMESTAMP" property="updateAt" />
    <result column="create_user" jdbcType="INTEGER" property="createUser" />
    <result column="create_at" jdbcType="TIMESTAMP" property="createAt" />
  </resultMap>
  <sql id="Base_Column_List">
    id, type_id, address_id, number, department_id, state, update_user, update_at, create_user, 
    create_at
  </sql>
  <select id="selectByPrimaryKey" parameterType="java.lang.Integer" resultMap="BaseResultMap">
    select 
    <include refid="Base_Column_List" />
    from job_offers
    where id = #{id,jdbcType=INTEGER}
  </select>
  <delete id="deleteByPrimaryKey" parameterType="java.lang.Integer">
    delete from job_offers
    where id = #{id,jdbcType=INTEGER}
  </delete>
  <insert id="insert" parameterType="com.vsc.website.entity.JobOffers" useGeneratedKeys="true" keyProperty="id">
    insert into job_offers (id, type_id, address_id, 
      number, department_id, state, 
      update_user, update_at, create_user, 
      create_at)
    values (#{id,jdbcType=INTEGER}, #{typeId,jdbcType=INTEGER}, #{addressId,jdbcType=INTEGER}, 
      #{number,jdbcType=INTEGER}, #{departmentId,jdbcType=INTEGER}, #{state,jdbcType=INTEGER}, 
      #{updateUser,jdbcType=INTEGER}, #{updateAt,jdbcType=TIMESTAMP}, #{createUser,jdbcType=INTEGER}, 
      #{createAt,jdbcType=TIMESTAMP})
  </insert>
  <insert id="insertSelective" parameterType="com.vsc.website.entity.JobOffers">
    insert into job_offers
    <trim prefix="(" suffix=")" suffixOverrides=",">
      <if test="id != null">
        id,
      </if>
      <if test="typeId != null">
        type_id,
      </if>
      <if test="addressId != null">
        address_id,
      </if>
      <if test="number != null">
        number,
      </if>
      <if test="departmentId != null">
        department_id,
      </if>
      <if test="state != null">
        state,
      </if>
      <if test="updateUser != null">
        update_user,
      </if>
      <if test="updateAt != null">
        update_at,
      </if>
      <if test="createUser != null">
        create_user,
      </if>
      <if test="createAt != null">
        create_at,
      </if>
    </trim>
    <trim prefix="values (" suffix=")" suffixOverrides=",">
      <if test="id != null">
        #{id,jdbcType=INTEGER},
      </if>
      <if test="typeId != null">
        #{typeId,jdbcType=INTEGER},
      </if>
      <if test="addressId != null">
        #{addressId,jdbcType=INTEGER},
      </if>
      <if test="number != null">
        #{number,jdbcType=INTEGER},
      </if>
      <if test="departmentId != null">
        #{departmentId,jdbcType=INTEGER},
      </if>
      <if test="state != null">
        #{state,jdbcType=INTEGER},
      </if>
      <if test="updateUser != null">
        #{updateUser,jdbcType=INTEGER},
      </if>
      <if test="updateAt != null">
        #{updateAt,jdbcType=TIMESTAMP},
      </if>
      <if test="createUser != null">
        #{createUser,jdbcType=INTEGER},
      </if>
      <if test="createAt != null">
        #{createAt,jdbcType=TIMESTAMP},
      </if>
    </trim>
  </insert>
  <update id="updateByPrimaryKeySelective" parameterType="com.vsc.website.entity.JobOffers">
    update job_offers
    <set>
      <if test="typeId != null">
        type_id = #{typeId,jdbcType=INTEGER},
      </if>
      <if test="addressId != null">
        address_id = #{addressId,jdbcType=INTEGER},
      </if>
      <if test="number != null">
        number = #{number,jdbcType=INTEGER},
      </if>
      <if test="departmentId != null">
        department_id = #{departmentId,jdbcType=INTEGER},
      </if>
      <if test="state != null">
        state = #{state,jdbcType=INTEGER},
      </if>
      <if test="updateUser != null">
        update_user = #{updateUser,jdbcType=INTEGER},
      </if>
      <if test="updateAt != null">
        update_at = #{updateAt,jdbcType=TIMESTAMP},
      </if>
      <if test="createUser != null">
        create_user = #{createUser,jdbcType=INTEGER},
      </if>
      <if test="createAt != null">
        create_at = #{createAt,jdbcType=TIMESTAMP},
      </if>
    </set>
    where id = #{id,jdbcType=INTEGER}
  </update>
  <update id="updateByPrimaryKey" parameterType="com.vsc.website.entity.JobOffers">
    update job_offers
    set type_id = #{typeId,jdbcType=INTEGER},
      address_id = #{addressId,jdbcType=INTEGER},
      number = #{number,jdbcType=INTEGER},
      department_id = #{departmentId,jdbcType=INTEGER},
      state = #{state,jdbcType=INTEGER},
      update_user = #{updateUser,jdbcType=INTEGER},
      update_at = #{updateAt,jdbcType=TIMESTAMP},
      create_user = #{createUser,jdbcType=INTEGER},
      create_at = #{createAt,jdbcType=TIMESTAMP}
    where id = #{id,jdbcType=INTEGER}
  </update>
 <select id="list" resultType="com.vsc.website.vo.backend.BJobOffersListVo">
   select A.id,
   A.type_id,
   C.dict_name as typeName,
   A.address_id,
   D.dict_name as addressName,
   A.number,
   A.department_id,
   E.dict_name as departmentName,
   A.state,
   F.name as update_user,
   A.update_at,
   (select job_name from job_offers_names where job_offers_id=A.id order by case language when #{language,jdbcType=INTEGER} then 1 else 0 end limit 1) as job_name
   from job_offers A
   inner join job_offers_names B on A.id =B.job_offers_id
   inner join dict_name C on type_id=C.dict_id and C.language=#{language,jdbcType=INTEGER}
   inner join dict_name D on address_id=D.dict_id and D.language=#{language,jdbcType=INTEGER}
   inner join dict_name E on department_id=E.dict_id and E.language=#{language,jdbcType=INTEGER}
   inner join user F on A.update_user=F.id
   where 1=1
   <if test="keywords != null">
     and (B.job_name like  CONCAT('%',#{keywords,jdbcType=VARCHAR},'%')
     or B.duty like CONCAT('%',#{keywords,jdbcType=VARCHAR},'%')
     or B.demand like CONCAT('%',#{keywords,jdbcType=VARCHAR},'%')
     or C.dict_name like CONCAT('%',#{keywords,jdbcType=VARCHAR},'%')
     or D.dict_name like CONCAT('%',#{keywords,jdbcType=VARCHAR},'%')
     or E.dict_name like CONCAT('%',#{keywords,jdbcType=VARCHAR},'%'))
   </if>
   group by A.id,
   A.type_id,
   C.dict_name,
   A.address_id,
   D.dict_name,
   A.number,
   A.department_id,
   E.dict_name,
   A.state,
   F.name,
   A.update_at
   order by A.update_at desc
 </select>

  <select id="detail" resultType="com.vsc.website.vo.backend.BJobOffersDetailVo">
    select A.id,
   A.type_id,
   C.dict_name as typeName,
   A.address_id,
   D.dict_name as addressName,
   A.number,
   A.department_id,
   E.dict_name as departmentName,
   A.state,
   F.name as update_user,
   A.update_at
   from job_offers A
   inner join dict_name C on type_id=C.dict_id and C.language=#{language,jdbcType=INTEGER}
   inner join dict_name D on address_id=D.dict_id and D.language=#{language,jdbcType=INTEGER}
   inner join dict_name E on department_id=E.dict_id and E.language=#{language,jdbcType=INTEGER}
   inner join user F on A.update_user=F.id
   where A.id = #{id,jdbcType=INTEGER}
  </select>
<!--  <select id="frontendList" resultType="com.vsc.website.vo.frontend.FJobOffersListVo">-->
<!--    select A.id,B.job_name,C.dict_name as addressName,A.number,A.update_at-->
<!--    from job_offers A-->
<!--    inner join job_offers_names B on A.id=B.job_offers_id and B.language=#{language,jdbcType=INTEGER}-->
<!--    inner join dict_name C on A.address_id=C.dict_id and C.language=#{language,jdbcType=INTEGER}-->
<!--    where state=1-->
<!--    <if test="typeId != null">-->
<!--      and A.type_id=#{typeId,jdbcType=INTEGER}-->
<!--    </if>-->
<!--    order by A.update_at desc-->
<!--  </select>-->
  <select id="frontendList" resultType="com.vsc.website.vo.frontend.FJobOffersListVo">
    select A.id,
    A.type_id,
    C.dict_name as typeName,
    A.address_id,
    D.dict_name as addressName,
    A.number,
    A.department_id,
    E.dict_name as departmentName,
    A.state,
    F.name as update_user,
    A.update_at
    from job_offers A
    inner join dict_name C on type_id=C.dict_id and C.language=#{language,jdbcType=INTEGER}
    inner join dict_name D on address_id=D.dict_id and D.language=#{language,jdbcType=INTEGER}
    inner join dict_name E on department_id=E.dict_id and E.language=#{language,jdbcType=INTEGER}
    inner join user F on A.update_user=F.id
    where state=1
    <if test="typeId != null">
      and A.type_id=#{typeId,jdbcType=INTEGER}
    </if>
    order by A.update_at desc
  </select>
</mapper>